/*
 * Copyright (c) 2017 Andrey Gavrikov.
 * this file is part of tooling-force.com application
 * https://github.com/neowit/tooling-force.com
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.neowit.apex

import java.io.{PrintWriter, StringWriter, File}

import com.neowit.utils.FileUtils

import scala.util.{Failure, Success}

class UnsupportedApexTypeException(msg: String) extends UnsupportedOperationException(msg)
/**
 * this helper singleton allows to generate blank/dummy apex files
 */
object StubFileGenerator {

    /**
     * using given Apex file generate a dummy version of that file
     * @param apiVersion - SFDC API version to use for dummy
     * @param parentFolder - where to save the file
     * @param file - actual file to make a dummy copy from
     * @param withMetaXml - do we need to generate -meta.xml file as well?
     * @return tuple: dummy-file, Option(its -meta.xml)
     */
    def generateStub(apiVersion: String, parentFolder: File, file: File, withMetaXml:Boolean = true ): Option[(File, Option[File])] = {
        val extension = FileUtils.getExtension(file)
        val fileName = file.getName.substring(0, file.getName.length - extension.length - 1)
        extension match {
            case "cls" => Some(generateClass(apiVersion, parentFolder, fileName, withMetaXml = true))
            case "trigger" => Some(generateTrigger(apiVersion, parentFolder, file, fileName, withMetaXml = true))
            case "page" => Some(generatePage(apiVersion, parentFolder, fileName, withMetaXml = true))
            case "component" => Some(generateComponent(apiVersion, parentFolder, fileName, withMetaXml = true))
            case x => None
        }

    }
    /**
     * @param apiVersion - e.g. 32.0
     * @param parentFolder - e.g. .../classes/
     * @param className - name without extension: e.g. MyClass
     * @param withMetaXml - if true then -meta.xml will be generated
     * @return tuple: class-file, Option(metaXmlFile)
     */
    def generateClass(apiVersion: String, parentFolder: File, className: String, withMetaXml:Boolean = true ): (File, Option[File]) = {
        val text =
            s"""
              |/**
              | * automatically generated by tooling-force.com: https://github.com/neowit/tooling-force.com
              | *
              | * This is a dummy class body used to disable real code and prepare for subsequent removal
              | */
              |public with sharing class $className {}
            """.stripMargin
        writeWithMetaXml(apiVersion, parentFolder, className + ".cls", text)
    }

    /**
     * @param apiVersion - e.g. 32.0
     * @param parentFolder - e.g. .../classes/ - folder where generated files(s) will be saved
     * @param triggerFile - source trigger - i.e. trigger based on which we need to generate a dummy
     * @param triggerName - name without extension: e.g. MyTrigger
     * @param withMetaXml - if true then -meta.xml will be generated
     * @return tuple: class-file, Option(metaXmlFile)
     */
    def generateTrigger(apiVersion: String, parentFolder: File, triggerFile: File, triggerName: String, withMetaXml:Boolean = true ): (File, Option[File]) = {
        if (triggerFile.exists()) {
            //figure out what object this trigger is on
            val triggerBody = FileUtils.readFile(triggerFile).getLines().mkString(" ")
            val objectTypeName = getTriggerObjectTypeName(triggerName, triggerBody) match {
                case Some(_objectTypeName) => _objectTypeName
                case _ => //trigger name not detected
                    throw new RuntimeException("Failed to detect object type name for trigger: " + triggerName)
            }
            val text =
                s"""
              |/**
              | * automatically generated by tooling-force.com: https://github.com/neowit/tooling-force.com
              | *
              | * This is a dummy trigger body used to disable real code and prepare for subsequent removal
              | */
              |trigger $triggerName on $objectTypeName (before insert){}
            """.stripMargin
            writeWithMetaXml(apiVersion, parentFolder, triggerName + ".trigger", text)
        } else {
            throw new RuntimeException("File with Trigger '" + triggerName + "' does not exist")
        }
    }

    def getTriggerObjectTypeName(triggerName: String, triggerBody: String): Option[String] = {
        val triggerNameExpr = """(?i).*\btrigger\s+\b""" + triggerName + """\s+on\s+(\w*)\s*\(.*"""
        val triggerNameRegex = triggerNameExpr.r
        triggerBody.replaceAll("""\r?\n""", " ") match {
            case triggerNameRegex(_objectTypeName) => Some(_objectTypeName)
            case _ => None//trigger name not detected
        }
    }

    /**
     * @param apiVersion - e.g. 32.0
     * @param parentFolder - e.g. .../pages/
     * @param pageName - name without extension: e.g. MyPage
     * @param withMetaXml - if true then -meta.xml will be generated
     * @return tuple: page-file, Option(metaXmlFile)
     */
    def generatePage(apiVersion: String, parentFolder: File, pageName: String, withMetaXml:Boolean = true ): (File, Option[File]) = {
        val text =
            s"""
              |<apex:page>
              |<!--
              | * automatically generated by tooling-force.com: https://github.com/neowit/tooling-force.com
              | *
              | * This is a dummy page body used to disable real code and prepare for subsequent removal
              |-->
              |</apex:page>
            """.stripMargin
        writeWithMetaXml(apiVersion, parentFolder, pageName + ".page", text)
    }

    /**
     * @param apiVersion - e.g. 32.0
     * @param parentFolder - e.g. .../components/
     * @param componentName - name without extension: e.g. MyComponent
     * @param withMetaXml - if true then -meta.xml will be generated
     * @return tuple: page-file, Option(metaXmlFile)
     */
    def generateComponent(apiVersion: String, parentFolder: File, componentName: String, withMetaXml:Boolean = true ): (File, Option[File]) = {
        val text =
            s"""
              |<apex:component>
              |<!--
              | * automatically generated by tooling-force.com: https://github.com/neowit/tooling-force.com
              | *
              | * This is a dummy component body used to disable real code and prepare for subsequent removal
              |-->
              |</apex:component>
            """.stripMargin
        writeWithMetaXml(apiVersion, parentFolder, componentName + ".component", text)
    }


    private def writeWithMetaXml(apiVersion: String, parentFolder: File, fileName: String, fileBodyText: String): (File, Option[File]) = {
        val file = new File(parentFolder, fileName)
        FileUtils.writeFile(fileBodyText, file)
        MetaXml.generateMetaXml(apiVersion, file) match {
            case Success(metaFile) =>
                (file, Some(metaFile))
            case Failure(e) =>
                val sw = new StringWriter
                e.printStackTrace(new PrintWriter(sw))
                println(sw.toString)
                (file, None)
        }

    }
}
